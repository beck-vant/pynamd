#!/usr/bin/env python2
from __future__ import print_function
import argparse
import sys
from signal import signal, SIGPIPE, SIG_DFL

import numpy as np
from scipy.stats import gaussian_kde

from pynamd import NamdLog


parser = argparse.ArgumentParser()
parser.add_argument('namdlog', type=str, nargs='*', default=[],
        help='one or more NAMD log files'
)
parser.add_argument('--start', type=int, default=1,
        help='first time step to consider (default=1)'
)
parser.add_argument('--stop', type=int, default=None,
        help='last time step to consider'
)
parser.add_argument('--step', type=int, default=1,
        help='step interval between samples'
)
parser.add_argument('--etitle', type=str, nargs='*', default=None,
        help='only print columns for selected etitles'
)
parser.add_argument('--weights', type=float, nargs='*', default=None,
        help='linear comb. weights'
)
parser.add_argument('--kde', action='store_true',
        help='use KDE instead of histogram'
)
parser.add_argument('--npts', type=int, default=101,
        help='# of grid points for KDE'
)
args = parser.parse_args()

if len(sys.argv) < 2 or len(args.namdlog) < 1:
    parser.print_help()
    sys.exit()

log = NamdLog(*args.namdlog)
args.stop = (log.numsteps if args.stop is None else args.stop)

# This fixes a 'Broken pipe' error when piping output into head, tail, etc.
signal(SIGPIPE, SIG_DFL)

if args.etitle is None:
    # Use all of the regular ETITILE entries. This kind of formatted printing
    # is already built into the NamdLog class.
    #
    header = ['#      ' + log.etitle.lstrip('ETITLE:')]
else:
    # Just pick out the user selected entries.
    #
    valid_etitle = log.etitle.split()
    valid_tititle = ([] if not len(log.ti) > 0 else log.tititle.split())
    valid_feptitle = ([] if not len(log.fep) > 0 else log.feptitle.split())
    term_list = []
    header = ['#      ']
    ntitle = 1
    invalid_title = []
    for etitle in args.etitle:
        _etitle = etitle.upper()
        if _etitle in valid_etitle:
            term_list.append(log.energy[_etitle][args.start:args.stop:args.step])
        elif _etitle in valid_tititle:
            term_list.append(log.ti[_etitle][args.start:args.stop:args.step])
        elif _etitle in valid_feptitle:
            term_list.append(log.fep[_etitle][args.start:args.stop:args.step])
        else:
            invalid_title.append(etitle)
            continue
        header.append(' %14s'%_etitle)
        ntitle += 1
        if ntitle == 5:
            header.append('     ')
            ntitle = 0
    for etitle in invalid_title:
        args.etitle.remove(etitle.upper())
        print('#WARNING! Skipping unknown etitle %s'%etitle)

# If doing a weighted linear combination, use the validated etitle list, but
# 
if args.weights is not None:
    nterms = len(''.join(header[1:]).strip().split())
    if len(args.weights) > 0 and len(args.weights) != nterms:
        print('#ERROR! Mismatch in etitle/weights (%d != %d)'%(
                len(args.weights), nterms)
             )
        sys.exit()
    new_header = []
    for w, h in zip(args.weights, header[1:]):
        new_header.append('(%.4f)*%s'%(w, h.strip()))
    print('#      ' + ' + '.join(new_header))
else:
    print(''.join(header))

hist = []
ctrs = []
if args.kde:
    def cpt_density(x):
        ranges = (x.min(), x.max())
        grid = np.linspace(x.min(), x.max(), args.npts)
        kde = gaussian_kde(x)
        kde.set_bandwidth(bw_method='silverman')
        hist.append(kde(grid))
        ctrs.append(grid)
        return None
else:
    def cpt_density(x):
        ranges = (x.min(), x.max())
        _hist, edges = np.histogram(x, 'auto', ranges, density=True)
        _ctrs = 0.5*(edges[1:] + edges[:-1])
        hist.append(_hist)
        ctrs.append(_ctrs)
        return None

if args.weights is None:
    for terms in term_list:
        cpt_density(terms)
else:
    # Take a weighted linear combination of the terms at each frame.
    lincom = (np.asarray(args.weights)[:, np.newaxis] *
              np.asarray(term_list)).sum(axis=0)
    cpt_density(lincom)

maxbins = np.max([h.size for h in hist])
for n in xrange(maxbins):
    line = ['']
    nvalue = 1
    for c, h in zip(ctrs, hist):
        try:
            x, y = c[n], h[n]
        except IndexError:
            x, y = np.nan, np.nan
        line.append('% 14.4f % 14e'%(x, y)) 
        nvalue += 1
        if nvalue == 5:
            line.append('     ')
            nvalue = 0
    print(' '.join(line))


